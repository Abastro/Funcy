// PRED (identifier) - set defined by predicate - this declares element with such identifier, with the following condition
// IN (identifier) - defines the set to be a subset of the set with such identifier
// OR/AND - apply or/and to multiple conditions to combine them
// EQ/NEQ (identifier) - (in)equality check with the following set

// REF (desc) - defines reference


PRED variable

// Empty set
PRED empty
    AND
    EQ empty
    PRED x
        NEQ x
        LOAD x
    NEQ empty
    PRED @variable
        AND
        NEQ empty
        PRED #variable
            IN @variable
            EQ #variable
            LOAD variable
        EQ total // Equal with total set

// Pairs
PRED $decl
    OR
    // First pair - Complement
    EQ $decl
    PRED $decl.elem
        OR
        // Former set of the pair
        EQ $decl.elem
        PRED $decl.elem.former
            EQ $decl.elem.former
            REF Complement

        // Latter set of the pair
        EQ $decl.elem
        PRED $decl.elem.latter
            OR
            EQ $decl.elem.latter
            REF Complement

            EQ $decl.elem.latter
            // Complement function
            PRED $complement
                NEQ empty
                PRED $complement.input
                    NEQ empty
                    PRED $complement.output
                        AND
                        EQ $complement
                        // The elemental pair
                        PRED $complement.elem
                            OR
                            EQ $complement.elem
                            PRED $complement.elem.former
                                EQ $complement.elem.former
                                LOAD $complement.elem.input

                            EQ $complement.elem
                            PRED $complement.elem.latter
                                OR
                                EQ $complement.elem.latter
                                LOAD $complement.elem.input
                                EQ $complement.elem.latter
                                LOAD $complement.elem.output

                        EQ $complement.output
                        PRED $complement.output.elem
                            EQ empty
                            PRED $complement.input.elem
                                IN $complement.input
                                EQ $complement.input.elem
                                LOAD $complement.output.elem

    // Second pair - Union
    EQ $decl
    PRED $decl.elem
        OR
        // Former set of the pair
        EQ $decl.elem
        PRED $decl.elem.former
            EQ $decl.elem.former
            REF Union

        // Latter set of the pair
        EQ $decl.elem
        PRED $decl.elem.latter
            OR
            EQ $decl.elem.latter
            REF Union

            EQ $decl.elem.latter
            // Union function
            PRED $union
                NEQ empty
                PRED $union.input
                    NEQ empty
                    PRED $union.output
                        AND
                        EQ $union
                        // The elemental pair
                        PRED $union.elem
                            OR
                            EQ $union.elem
                            PRED $union.elem.former
                                EQ $union.elem.former
                                LOAD $union.elem.input

                            EQ $union.elem
                            PRED $union.elem.latter
                                OR
                                EQ $union.elem.latter
                                LOAD $union.elem.input
                                EQ $union.elem.latter
                                LOAD $union.elem.output

                        EQ $union.output
                        PRED $union.output.elem
                            NEQ empty
                            PRED $union.output.elem.container
                                IN $union.input
                                NEQ empty // to represent that the output element is in this container
                                    PRED #$union.output.elem
                                        IN $union.output.elem.container
                                        EQ #$union.output.elem
                                        LOAD $union.output.elem